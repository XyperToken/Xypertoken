<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>XYP3R // C0D3 P0RT4L</title>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Share+Tech+Mono&display=swap');

    html, body {
      margin: 0;
      padding: 0;
      background-color: #0d0d0d;
      color: #00ffcc;
      font-family: 'Share Tech Mono', monospace;
      height: 100%;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
    }

    canvas.matrix {
      position: fixed;
      top: 0; left: 0;
      width: 100vw;
      height: 100vh;
      z-index: -1;
      pointer-events: none;
    }

    .overlay {
      width: 100%;
      min-height: 100vh;
      background: rgba(0, 0, 0, 0.85);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      text-align: center;
      padding: 2rem 1rem;
      position: fixed;
      top: 0;
      left: 0;
      z-index: 10;
      transition: opacity 1s ease;
    }

    .title {
      font-size: 2.5rem;
      letter-spacing: 0.2em;
      text-shadow: 0 0 20px #00ffcc;
      margin-bottom: 1.5rem;
    }

    .crypto-text {
      font-size: 1rem;
      max-width: 90%;
      color: #00ffccaa;
      margin-bottom: 2rem;
      letter-spacing: 0.15em;
    }

    button.decrypt-btn {
      font-size: 1.4rem;
      padding: 0.8rem 2rem;
      border-radius: 12px;
      background: linear-gradient(135deg, #00ffcc, #009999);
      border: none;
      color: #000;
      font-weight: bold;
      cursor: pointer;
      box-shadow: 0 0 25px #00ffccaa;
      letter-spacing: 0.1em;
    }

    .glitching {
      animation: glitch 0.5s linear infinite;
    }

    @keyframes glitch {
      0% { clip-path: inset(0 0 0 0); transform: translate(0); }
      20% { clip-path: inset(10% 0 85% 0); transform: translate(-3px, -3px); }
      40% { clip-path: inset(85% 0 10% 0); transform: translate(3px, 3px); }
      60% { clip-path: inset(10% 0 85% 0); transform: translate(-3px, 3px); }
      80% { clip-path: inset(85% 0 10% 0); transform: translate(3px, -3px); }
      100% { clip-path: inset(0 0 0 0); transform: translate(0); }
    }

    #main-content {
      display: none;
      opacity: 0;
      max-width: 90%;
      padding: 2rem;
      background: #0d0d0d;
      text-align: center;
      border-radius: 12px;
      box-shadow: 0 0 40px #00ffccaa;
      z-index: 2;
      min-height: 80vh;
      flex-direction: column;
      justify-content: center;
      align-items: center;
    }

    #main-content h1 {
      font-size: 2rem;
      text-shadow: 0 0 15px #00ffcc;
      margin-bottom: 1rem;
    }

    #main-content p {
      font-size: 1rem;
      line-height: 1.5;
      margin-bottom: 2rem;
      color: #00ffccaa;
    }

    .btn-group {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 0.7rem;
    }

    .btn {
      padding: 0.7rem 1.5rem;
      font-size: 0.85rem;
      text-transform: uppercase;
      background: linear-gradient(135deg, #00ffcc, #00ccff);
      color: #000;
      border-radius: 10px;
      font-weight: bold;
      text-decoration: none;
      box-shadow: 0 0 15px #00ffcc99;
      transition: transform 0.2s, box-shadow 0.2s;
    }

    .btn:hover {
      transform: scale(1.05);
      box-shadow: 0 0 25px #00ffcc;
    }

    @media (max-width: 600px) {
      .title {
        font-size: 1.8rem;
      }

      .crypto-text {
        font-size: 0.9rem;
      }

      button.decrypt-btn {
        font-size: 1.2rem;
        padding: 0.6rem 1.5rem;
      }

      #main-content h1 {
        font-size: 1.5rem;
      }

      #main-content p {
        font-size: 0.9rem;
      }

      .btn {
        padding: 0.6rem 1.2rem;
        font-size: 0.75rem;
      }
    }
  </style>
</head>
<body>
  <canvas class="matrix"></canvas>

  <div class="overlay" id="overlay">
    <div class="title">XYP3R C0D3D P0RT4L</div>
    <div class="crypto-text">47F9 A1C3B7 XYP3R-K3Y-9A2F // D3CRYPT 7H3 S1GN4L</div>
    <button class="decrypt-btn" id="decrypt-btn">D3CRYPT SITE</button>
  </div>

  <div id="main-content">
    <h1>W3LC0M3 T0 XYP3R</h1>
    <p>3nt3r 7h3 3ncrypt3d cyb3r-r34lm. F0ll0w 7h3 riddl3s. Br34k 7h3 ch41n5.</p>
    <div class="btn-group">
      <a href="decrypt.htm" class="btn">D3crypt</a>
      <a href="airdrop.htm" class="btn">41rdr0p</a>
      <a href="howitworks.htm" class="btn">H0w 17 W0rk5</a>
      <a href="explorer.htm" class="btn">3xpL0r3r</a>
      <a href="roadmap.htm" class="btn">R04DM4P</a>
      <a href="https://t.me/XyperTokenSol" target="_blank" class="btn">73l3gr4m</a>
      <a href="https://twitter.com/XyperToken" target="_blank" class="btn">Tw1773r</a>
    </div>
  </div>

  <script>
    window.addEventListener("DOMContentLoaded", () => {
      const canvas = document.querySelector(".matrix");
      const ctx = canvas.getContext("2d");
      const fontSize = 16;
      let width, height, columns, drops;

      function resizeCanvas() {
        width = window.innerWidth;
        height = window.innerHeight;
        canvas.width = width;
        canvas.height = height;
        columns = Math.floor(width / fontSize);
        drops = new Array(columns).fill(1);
      }

      resizeCanvas();
      window.addEventListener('resize', resizeCanvas);

      const letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%&*";

      function drawMatrix() {
        ctx.fillStyle = "rgba(0, 0, 0, 0.05)";
        ctx.fillRect(0, 0, width, height);
        ctx.fillStyle = "#00ffcc";
        ctx.font = fontSize + "px Share Tech Mono";

        for(let i = 0; i < drops.length; i++) {
          const char = letters.charAt(Math.floor(Math.random() * letters.length));
          ctx.fillText(char, i * fontSize, drops[i] * fontSize);

          if(drops[i] * fontSize > height && Math.random() > 0.975) drops[i] = 0;
          drops[i]++;
        }
      }

      let matrixInterval = setInterval(drawMatrix, 50);

      const decryptBtn = document.getElementById("decrypt-btn");
      const overlay = document.getElementById("overlay");
      const mainContent = document.getElementById("main-content");

      function glitchAnimation(duration = 1000) {
        return new Promise(resolve => {
          overlay.classList.add("glitching");
          setTimeout(() => {
            overlay.classList.remove("glitching");
            resolve();
          }, duration);
        });
      }

      decryptBtn.addEventListener("click", async () => {
        decryptBtn.disabled = true;
        await glitchAnimation();

        overlay.style.opacity = 0;

        setTimeout(() => {
          overlay.style.display = "none";
          clearInterval(matrixInterval);
          mainContent.style.display = "flex";
          mainContent.style.opacity = 1;
        }, 1000);
      });
    });
  </script>
</body>
</html>
